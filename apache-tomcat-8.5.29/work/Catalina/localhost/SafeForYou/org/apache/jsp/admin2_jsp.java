/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.29
 * Generated at: 2018-03-21 03:20:47 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class admin2_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
 String root = request.getContextPath(); 
      out.write("\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=EUC-KR\">\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("var chartVars = \"rMateOnLoadCallFunction=chartReadyHandler\";\r\n");
      out.write("rMateChartH5.create(\"chart1\", \"chartHolder\", chartVars, \"100%\", \"100%\"); \r\n");
      out.write("function chartReadyHandler(id) {\r\n");
      out.write(" document.getElementById(id).setLayout(layoutStr);\r\n");
      out.write("   document.getElementById(id).setData(chartData);\r\n");
      out.write("}\r\n");
      out.write("var layoutStr = \r\n");
      out.write("             '<rMateChart frameColor=\"#EEEEEE\"  borderStyle=\"none\">'\r\n");
      out.write("                   +'<Options>'\r\n");
      out.write("                      +'<Caption text=\"게이지 - Gradient\" fontFamily=\"맑은 고딕\"/>'\r\n");
      out.write("                    +'</Options>'\r\n");
      out.write("                 +'<NumberFormatter id=\"numFmt\" precision=\"0\"/>'\r\n");
      out.write("                  +'<CircularGauge valueChangeFunction=\"valueChangeFunc\" padding=\"8\" startAngle=\"90\" minimumAngle=\"40\" maximumAngle=\"320\" minimum=\"0\" maximum=\"500\" value=\"200\" interval=\"50\" minorInterval=\"10\" formatter=\"{numFmt}\" tickLabelStyleName=\"tickText\" valueLabelStyleName=\"valueText\" editMode=\"true\" majorTickType=\"circle\" liveDragging=\"false\" tickGap=\"-3\" labelGap=\"-5\" showDataTip=\"false\" tickLabelPlacement=\"outside\" tickColor=\"#1B699A\" needleCoverRadius=\"100\" needleThickness=\"100\" pointThickness=\"0\" tickRadius=\"2\" needleLengthRatio=\"0.9\" minorTickType=\"line\" minorTickRadius=\"5\" needlePointStyle=\"rounding\" isValueTop=\"true\" animationDuration=\"1000\" bounceAnimating=\"true\" rotateTickLabel=\"true\" showOutFrame=\"true\" outFrameLabelXOffset=\"0\" outFrameLabelYOffset=\"0.2\">'\r\n");
      out.write("                     +'<frameFill>'\r\n");
      out.write("                            +'<LinearGradient angle=\"0\">'\r\n");
      out.write("                             +'<entries>'\r\n");
      out.write("                                  +'<GradientEntry color=\"#f6af43\" ratio=\"0\"/>'\r\n");
      out.write("                                 +'<GradientEntry color=\"#f55a58\" ratio=\"1\"/>'\r\n");
      out.write("                             +'</entries>'\r\n");
      out.write("                         +'</LinearGradient>'\r\n");
      out.write("                      +'</frameFill>'\r\n");
      out.write("                       +'<frameStroke>'\r\n");
      out.write("                          +'<Stroke color=\"#ffffff\" weight=\"0\"/>'\r\n");
      out.write("                       +'</frameStroke>'\r\n");
      out.write("                     +'<needleFill>'\r\n");
      out.write("                           +'<SolidColor color=\"#ffffff\"/>'\r\n");
      out.write("                      +'</needleFill>'\r\n");
      out.write("                      +'<needleStroke>'\r\n");
      out.write("                         +'<Stroke color=\"#ffffff\"/>'\r\n");
      out.write("                      +'</needleStroke>'\r\n");
      out.write("                        +'<needleCoverFill>'\r\n");
      out.write("                          +'<SolidColor color=\"#ffffff\"/>'\r\n");
      out.write("                      +'</needleCoverFill>'\r\n");
      out.write("                     +'<needleCoverStroke>'\r\n");
      out.write("                            +'<Stroke color=\"#ffffff\"/>'\r\n");
      out.write("                      +'</needleCoverStroke>'\r\n");
      out.write("                       +'<minorTickStroke>'\r\n");
      out.write("                          +'<Stroke color=\"#ffffff\" alpha=\"0.5\"/>'\r\n");
      out.write("                      +'</minorTickStroke>'\r\n");
      out.write("                     +'<tickFill>'\r\n");
      out.write("                         +'<SolidColor color=\"#ffffff\"/>'\r\n");
      out.write("                      +'</tickFill>'\r\n");
      out.write("                        +'<tickStroke>'\r\n");
      out.write("                           +'<Stroke color=\"#ffffff\" weight=\"3\"/>'\r\n");
      out.write("                       +'</tickStroke>'\r\n");
      out.write("                  +'</CircularGauge>'\r\n");
      out.write("                   +'<Style>'\r\n");
      out.write("                        +'.valueText{'\r\n");
      out.write("                          +'fontSize:35;'\r\n");
      out.write("                         +'textAlign:center;'\r\n");
      out.write("                            +'backgroundColor:#FFFFFF;'\r\n");
      out.write("                         +'backgroundAlpha:0;'\r\n");
      out.write("                           +'paddingTop:0;'\r\n");
      out.write("                            +'borderStyle:none;'\r\n");
      out.write("                            +'fontWeight:bold;'\r\n");
      out.write("                         +'color:#555555;'\r\n");
      out.write("                       +'}'\r\n");
      out.write("                        +'.tickText{'\r\n");
      out.write("                           +'fontFamily:\"맑은 고딕\";'\r\n");
      out.write("                          +'fontSize:11;'\r\n");
      out.write("                         +'color:#555555;'\r\n");
      out.write("                       +'}'\r\n");
      out.write("                    +'</Style>'\r\n");
      out.write("               +'</rMateChart>';\r\n");
      out.write("var chartData = [201];\r\n");
      out.write("function changeValue()\r\n");
      out.write("{\r\n");
      out.write(" document.getElementById(\"chart1\").setData([parseInt(Math.random()*100) * 5]);\r\n");
      out.write("}\r\n");
      out.write("var gaugeValue;\r\n");
      out.write("function valueChangeFunc(value)\r\n");
      out.write("{\r\n");
      out.write("    gaugeValue = value;\r\n");
      out.write("}\r\n");
      out.write("function commitValue()\r\n");
      out.write("{\r\n");
      out.write("    alert(gaugeValue);\r\n");
      out.write("}\r\n");
      out.write("rMateChartH5.registerTheme(rMateChartH5.themes);\r\n");
      out.write("function rMateChartH5ChangeTheme(theme){\r\n");
      out.write("    document.getElementById(\"chart1\").setTheme(theme);\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("<link href=\"");
      out.print(root);
      out.write("/css/style2.css\" rel=\"stylesheet\" type=\"text/css\">\r\n");
      out.write("<title>관리자 페이지</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<div class=\"nav\">\r\n");
      out.write("\t\t<div>\r\n");
      out.write("\t\t\t<a href=\"admin.do\">\r\n");
      out.write("\t\t\t\t<button id=\"btn6\">\r\n");
      out.write("\t\t\t\t\t<img src=\"");
      out.print(root);
      out.write("/img/main.png\" alt=\"logo\" class=\"mainImg\">\r\n");
      out.write("\t\t\t\t</button>\r\n");
      out.write("\t\t\t</a>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<br>\r\n");
      out.write("\t\t<div>\r\n");
      out.write("\t\t\t<a href=\"sensorlog.do\"> <input type=\"button\" value=\"센서로그\"\r\n");
      out.write("\t\t\t\tclass=\"menuBtn\" id=\"btn1\">\r\n");
      out.write("\t\t\t</a>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<br>\r\n");
      out.write("\t\t<div>\r\n");
      out.write("\t\t\t<a href=\"eventlog.do\"> <input type=\"button\" value=\"사건목록\"\r\n");
      out.write("\t\t\t\tclass=\"menuBtn\" id=\"btn2\">\r\n");
      out.write("\t\t\t</a>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<br>\r\n");
      out.write("\t\t<div>\r\n");
      out.write("\t\t\t<a href=\"streaming.do\"> <input type=\"button\" value=\"실시간 스트리밍\"\r\n");
      out.write("\t\t\t\tclass=\"menuBtn\" id=\"btn3\">\r\n");
      out.write("\t\t\t</a>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<br>\r\n");
      out.write("\t\t<div>\r\n");
      out.write("\t\t\t<a href=\"employee.do\"> <input type=\"button\" value=\"사원정보\"\r\n");
      out.write("\t\t\t\tclass=\"menuBtn\" id=\"btn4\">\r\n");
      out.write("\t\t\t</a>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<br>\r\n");
      out.write("\t\t<div>\r\n");
      out.write("\t\t\t<a href=\"location.do\"> <input type=\"button\" value=\"위치정보\"\r\n");
      out.write("\t\t\t\tclass=\"menuBtn\" id=\"btn5\">\r\n");
      out.write("\t\t\t</a>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<div class=\"container\">\r\n");
      out.write("\t\t<div class=\"top\">온도 api ");
      out.print(request.getAttribute("result"));
      out.write("</div>\r\n");
      out.write("\t\t<div class=\"content\"></div>\r\n");
      out.write("\t</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
